> Intent
1. Provide an interface for creating families of related or dependent objects
without specifying their concrete classes. [GoF, p87] 
2. A hierarchy that encapsulates: many possible "platforms", and the construction
of a suite of "products". 
3. The new operator considered harmful.

>Problem
1. If an application is to be portable, it needs to encapsulate platform dependencies. 
These "platforms" might include: windowing system, operating system, database, etc. 
2. Too often, this encapsulatation is not engineered in advance, and lots of #ifdef
case statements with options for all currently supported platforms begin to procreate
like rabbits throughout the code. 

Abstract Factory patterns works around a super-factory which creates other factories.
This factory is also called as Factory of factories. This type of design pattern
comes under creational pattern as this pattern provides one of the best ways to
create an object. 

In Abstract Factory pattern an interface is responsible for creating a factory of
related objects, without explicitly specifying their classes. Each generated 
factory can give the objects as per the Factory pattern.
